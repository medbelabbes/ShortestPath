/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Windows;

import Classes.Graphe;
import Classes.Paint;
import Classes.Algorithme_Dijkstra;
import Classes.Algorithme_Prim;
import java.awt.Color;
import java.awt.Cursor;
import javax.swing.JOptionPane;

public class Principal_Window extends javax.swing.JFrame {

    Paint paint = new Paint();
    Graphe graphe = new Graphe();
    int xMouse;
    int yMouse;

    public static void R_repaint(int nbr_sommet, Graphe graphe) {
        for (int j = 0; j < nbr_sommet; j++) {
            for (int k = 0; k < nbr_sommet; k++) {
                if (graphe.getMatrice_adjacence(j, k) == 1) {
                    Paint.Paint_Line(graphe_panel.getGraphics(), graphe.getCordX(j), graphe.getCordY(j), graphe.getCordX(k), graphe.getCordY(k), graphe.getMatrice_Coefficients(j, k));
                }
            }
        }
        for (int j = 0; j < nbr_sommet; j++) {
            Paint.Paint_Cercle(graphe_panel.getGraphics(), graphe.getCordX(j), graphe.getCordY(j), String.valueOf(graphe.getNombre(j)));
        }

    }

    public static int entrer_sommet_source(String sommet_s, String noExiste, int nbr_sommet) {
        int sommet_source = 0;
        try {
            sommet_source = Integer.parseInt(JOptionPane.showInputDialog("" + sommet_s));
            if (sommet_source >= nbr_sommet) {
                JOptionPane.showMessageDialog(null, "" + noExiste + "\nIl faut entrer un somment existant");
                sommet_source = entrer_sommet_source(sommet_s, noExiste, nbr_sommet);
            }
        } catch (Exception ex) {
            sommet_source = entrer_sommet_source(sommet_s, noExiste, nbr_sommet);
        }
        return sommet_source;
    }

    public int Entrer_taille(String taille) {
        int t = 0;
        try {
            t = Integer.parseInt(JOptionPane.showInputDialog("" + taille));
            if (t < 1) {
                JOptionPane.showMessageDialog(null, "Vous devez entrer une taille acceptés..");
                t = Entrer_taille(taille);//no es nesario hacer esto
            }
        } catch (Exception ex) {
            t = Entrer_taille(taille);
        }
        return t;
    }

    public boolean Clic_gauche1_sommet(int xxx, int yyy) {
        for (int j = 0; j < nbr_sommet; j++) {//Nous avons consulté si vous cliquez sur un noeud donné 
            if ((xxx + 2) > graphe.getCordX(j) && xxx < (graphe.getCordX(j) + 13) && (yyy + 2) > graphe.getCordY(j) && yyy < (graphe.getCordY(j) + 13)) {

                if (n == 0) {
                    id = j;
                    R_repaint(nbr_sommet, graphe);
                    Paint.cliquer_à_gauche_sommet(graphe_panel.getGraphics(), graphe.getCordX(j), graphe.getCordY(j), null, Color.orange);
                    n++;
                } else {
                    id2 = j;
                    n++;
                    Paint.cliquer_à_gauche_sommet(graphe_panel.getGraphics(), graphe.getCordX(j), graphe.getCordY(j), null, Color.orange);
                    if (id == id2) {// si id == id2 por q se volvio a dar click sobre el mismos nodo, se cancela el click anterio
                        n = 0;
                        Paint.Paint_Cercle(graphe_panel.getGraphics(), graphe.getCordX(id), graphe.getCordY(id), String.valueOf(graphe.getNombre(id)));
                        id = -1;
                        id2 = -1;
                    }
                }
                nn = 0;
                return true;
            }
        }
        return false;
    }

    public void Clic_droite_sommet(int xxx, int yyy) {
        for (int j = 0; j < nbr_sommet; j++) {
            if ((xxx + 2) > graphe.getCordX(j) && xxx < (graphe.getCordX(j) + 13) && (yyy + 2) > graphe.getCordY(j) && yyy < (graphe.getCordY(j) + 13)) {
                if (nn == 0) {
                    SommetActuel = j;
                    R_repaint(nbr_sommet, graphe);
                } else {
                    sommetFin = j;
                }
                nn++;
                n = 0;
                id = -1;
                Paint.cliquer_à_gauche_sommet(graphe_panel.getGraphics(), graphe.getCordX(j), graphe.getCordY(j), null, Color.GREEN);
                break;
            }
        }
    }

    public Principal_Window() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem3 = new javax.swing.JMenuItem();
        principale_panel = new javax.swing.JPanel();
        dijisktra_radio_btn = new javax.swing.JRadioButton();
        prim_radio_btn = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        graphe_panel = new javax.swing.JPanel();
        graphe_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        autre_option_label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        autres_options_panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Autres_options_liste = new javax.swing.JList();
        Eliminer_combobox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        distance_txt = new javax.swing.JTextField();
        repaindre_label = new javax.swing.JLabel();
        Confirmer_algo_btn1 = new javax.swing.JLabel();
        principal_window_label = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fichier_menu_item = new javax.swing.JMenu();
        new_project_menu_item = new javax.swing.JMenuItem();
        sortir_menu_item = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ShortestPath");
        setUndecorated(true);
        setResizable(false);

        principale_panel.setLayout(null);

        dijisktra_radio_btn.setBackground(new java.awt.Color(60, 109, 245));
        buttonGroup1.add(dijisktra_radio_btn);
        dijisktra_radio_btn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dijisktra_radio_btn.setForeground(new java.awt.Color(255, 255, 255));
        dijisktra_radio_btn.setText("DIJIKSTRA");
        dijisktra_radio_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijisktra_radio_btnActionPerformed(evt);
            }
        });
        principale_panel.add(dijisktra_radio_btn);
        dijisktra_radio_btn.setBounds(60, 130, 91, 23);

        prim_radio_btn.setBackground(new java.awt.Color(60, 109, 245));
        buttonGroup1.add(prim_radio_btn);
        prim_radio_btn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        prim_radio_btn.setForeground(new java.awt.Color(255, 255, 255));
        prim_radio_btn.setText("PRIM");
        prim_radio_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prim_radio_btnActionPerformed(evt);
            }
        });
        principale_panel.add(prim_radio_btn);
        prim_radio_btn.setBounds(60, 150, 59, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/332323.png"))); // NOI18N
        principale_panel.add(jLabel1);
        jLabel1.setBounds(20, 20, 200, 90);

        graphe_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(60, 109, 245), 4));
        graphe_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                graphe_panelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout graphe_panelLayout = new javax.swing.GroupLayout(graphe_panel);
        graphe_panel.setLayout(graphe_panelLayout);
        graphe_panelLayout.setHorizontalGroup(
            graphe_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphe_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
        graphe_panelLayout.setVerticalGroup(
            graphe_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphe_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );

        principale_panel.add(graphe_panel);
        graphe_panel.setBounds(230, 20, 570, 520);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Choisir Un Algorithme :");
        principale_panel.add(jLabel2);
        jLabel2.setBounds(20, 110, 141, 15);

        autre_option_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        autre_option_label.setForeground(new java.awt.Color(255, 255, 255));
        autre_option_label.setText("Autres options :");
        autre_option_label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        autre_option_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                autre_option_labelMouseEntered(evt);
            }
        });
        principale_panel.add(autre_option_label);
        autre_option_label.setBounds(20, 390, 100, 14);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("La distance :");
        principale_panel.add(jLabel4);
        jLabel4.setBounds(20, 280, 90, 14);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Eliminer :");
        principale_panel.add(jLabel5);
        jLabel5.setBounds(20, 330, 70, 14);

        autres_options_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                autres_options_panelMouseEntered(evt);
            }
        });
        autres_options_panel.setLayout(null);

        Autres_options_liste.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Autres_options_liste.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Nouvelle aréte", "Matrice des Coefficients", "Matrice d'adjacence", "Exemple 1", "Exemple 2 (TD)", "Exemple 3 (TD)" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        Autres_options_liste.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Autres_options_liste.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Autres_options_listeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Autres_options_liste);

        autres_options_panel.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 170, 100);

        principale_panel.add(autres_options_panel);
        autres_options_panel.setBounds(40, 410, 170, 100);

        Eliminer_combobox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Eliminer_combobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sommet", "Arête", "Toutes les aréte" }));
        Eliminer_combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Eliminer_comboboxActionPerformed(evt);
            }
        });
        principale_panel.add(Eliminer_combobox);
        Eliminer_combobox.setBounds(100, 330, 110, 21);

        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }
        });
        principale_panel.add(jLabel7);
        jLabel7.setBounds(14, 390, 200, 120);

        distance_txt.setEditable(false);
        distance_txt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        principale_panel.add(distance_txt);
        distance_txt.setBounds(100, 280, 60, 21);

        repaindre_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        repaindre_label.setForeground(new java.awt.Color(255, 255, 255));
        repaindre_label.setText("    Repeindre");
        repaindre_label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        repaindre_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repaindre_labelMouseClicked(evt);
            }
        });
        principale_panel.add(repaindre_label);
        repaindre_label.setBounds(73, 228, 90, 30);

        Confirmer_algo_btn1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Confirmer_algo_btn1.setForeground(new java.awt.Color(255, 255, 255));
        Confirmer_algo_btn1.setText("    Confirmer");
        Confirmer_algo_btn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Confirmer_algo_btn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Confirmer_algo_btn1MouseClicked(evt);
            }
        });
        principale_panel.add(Confirmer_algo_btn1);
        Confirmer_algo_btn1.setBounds(124, 175, 90, 30);

        principal_window_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/principal_window.png"))); // NOI18N
        principal_window_label.setDoubleBuffered(true);
        principal_window_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                principal_window_labelMouseEntered(evt);
            }
        });
        principale_panel.add(principal_window_label);
        principal_window_label.setBounds(0, 0, 824, 562);

        jMenuBar1.setBackground(new java.awt.Color(153, 153, 153));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));
        jMenuBar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseMoved(evt);
            }
        });
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuBar1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseReleased(evt);
            }
        });

        fichier_menu_item.setText("Fichier");
        fichier_menu_item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fichier_menu_itemMouseEntered(evt);
            }
        });

        new_project_menu_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        new_project_menu_item.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Files-New-File-icon.png"))); // NOI18N
        new_project_menu_item.setText("Nouveau projet");
        new_project_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_project_menu_itemActionPerformed(evt);
            }
        });
        fichier_menu_item.add(new_project_menu_item);

        sortir_menu_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        sortir_menu_item.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/symbol-delete-icon.png"))); // NOI18N
        sortir_menu_item.setText("Sortir");
        sortir_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortir_menu_itemActionPerformed(evt);
            }
        });
        fichier_menu_item.add(sortir_menu_item);

        jMenuBar1.add(fichier_menu_item);

        jMenu2.setText("?");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem4.setText("À propos des Algorithmes");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/About-icon.png"))); // NOI18N
        jMenuItem2.setText("À propos de ShortestPath");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principale_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principale_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void prim_radio_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prim_radio_btnActionPerformed

    }//GEN-LAST:event_prim_radio_btnActionPerformed

    private void autre_option_labelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_autre_option_labelMouseEntered


    }//GEN-LAST:event_autre_option_labelMouseEntered

    private void principal_window_labelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_principal_window_labelMouseEntered

    }//GEN-LAST:event_principal_window_labelMouseEntered

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered
        autres_options_panel.setVisible(true);
    }//GEN-LAST:event_jLabel7MouseEntered

    private void autres_options_panelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_autres_options_panelMouseEntered
        autres_options_panel.setVisible(true);
    }//GEN-LAST:event_autres_options_panelMouseEntered

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        About a = new About();
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        About_algo A = new About_algo();
        A.setVisible(true);
        A.dijkstra_radio_btn.setEnabled(false);
        A.dijkstra_radio_btn.setForeground(Color.gray);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void dijisktra_radio_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijisktra_radio_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dijisktra_radio_btnActionPerformed

    private void graphe_panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphe_panelMousePressed
        int xxx, yyy;
        xxx = evt.getX();
        yyy = evt.getY();
        if (evt.isMetaDown()) {
            Clic_droite_sommet(xxx, yyy);
            if (nn == 2) {
                nn = 0;
                Algorithme_Dijkstra Dijkstra = new Algorithme_Dijkstra(graphe, nbr_sommet, SommetActuel, sommetFin);
                Dijkstra.dijkstra();
                distance_txt.setText("" + Dijkstra.getDistance());

            }
        } else {
            if (!Clic_gauche1_sommet(xxx, yyy)) {// si vous n'avez pas cliquer sur un sommet pénetre
                if (nbr_sommet < 500) {
                    graphe.setCordX(nbr_sommet, xxx);
                    graphe.setCordY(nbr_sommet, yyy);
                    graphe.setNombre(nbr_sommet, nbr_sommet);
                    Paint.Paint_Cercle(graphe_panel.getGraphics(), graphe.getCordX(nbr_sommet), graphe.getCordY(nbr_sommet), String.valueOf(graphe.getNombre(nbr_sommet)));
                    nbr_sommet++;
                } else {
                    JOptionPane.showMessageDialog(null, "vous avez atteint à un nombre maximum des sommets..");
                }
            }
            if (n == 2) {
                n = 0;
                int taille = Entrer_taille("Entrer un poid");
                if (max_poid_aréte < taille) {
                    max_poid_aréte = taille;
                }
                graphe.setMatrice_adjacence(id2, id, 1);
                graphe.setMatrice_adjacence(id, id2, 1);
                graphe.setMatrice_Coefficients(id2, id, taille);
                graphe.setMatrice_Coefficients(id, id2, taille);
                Paint.Paint_Line(graphe_panel.getGraphics(), graphe.getCordX(id), graphe.getCordY(id), graphe.getCordX(id2), graphe.getCordY(id2), taille);
                Paint.Paint_Cercle(graphe_panel.getGraphics(), graphe.getCordX(id), graphe.getCordY(id), String.valueOf(graphe.getNombre(id)));
                Paint.Paint_Cercle(graphe_panel.getGraphics(), graphe.getCordX(id2), graphe.getCordY(id2), String.valueOf(graphe.getNombre(id2)));
                id = -1;
                id2 = -1;
            }
        }
    }//GEN-LAST:event_graphe_panelMousePressed

    private void Autres_options_listeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Autres_options_listeValueChanged
        String selected = Autres_options_liste.getSelectedValue().toString();
        if (selected.equalsIgnoreCase("Exemple 1")) {
            //jMenuItem2.setEnabled(false);
            graphe_panel.paint(graphe_panel.getGraphics());
            n = 0;
            id = -1;
            id2 = -1;
            int matrice[][] = {
                {0, 1, 0, 1, 1, 0, 0, 1},
                {1, 0, 1, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 1, 0, 0, 0},
                {1, 0, 1, 0, 0, 0, 0, 0},
                {1, 0, 1, 0, 0, 1, 0, 0},
                {0, 0, 0, 0, 1, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 0, 0},
                {1, 0, 0, 0, 0, 1, 0, 0}
            };
            int coeff[][] = {
                {0, 50, 0, 46, 216, 0, 0, 578},
                {50, 0, 59, 0, 0, 0, 0, 0},
                {0, 59, 0, 89, 174, 0, 0, 0},
                {46, 0, 89, 0, 0, 0, 0, 0},
                {216, 0, 174, 0, 0, 471, 0, 0},
                {0, 0, 0, 0, 471, 0, 194, 398},
                {0, 0, 0, 0, 0, 194, 0, 0},
                {578, 0, 0, 0, 0, 398, 0, 0},};
            int xx1[] = {202, 102, 8, 198, 248, 352, 481, 416};
            int yy1[] = {12, 74, 165, 113, 233, 300, 368, 177};
            int nom[] = {0, 1, 2, 3, 4, 5, 6, 7};
            max_poid_aréte = 600;
            for (int j = 0; j < 8; j++) {
                graphe.setCordX(j, xx1[j]);
                graphe.setCordY(j, yy1[j]);
                graphe.setNombre(j, nom[j]);

            }
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    graphe.setMatrice_adjacence(j, k, matrice[j][k]);
                    graphe.setMatrice_Coefficients(j, k, coeff[j][k]);
                }
            }
            nbr_sommet = 8;
            R_repaint(nbr_sommet, graphe);

        } else if (selected.equalsIgnoreCase("Exemple 3 (TD)")) {
            //jMenuItem2.setEnabled(false);
            graphe_panel.paint(graphe_panel.getGraphics());
            n = 0;
            id = -1;
            id2 = -1;
            int matrice[][] = {{0, 1, 1, 1, 0, 0},
            {1, 0, 0, 1, 0, 1},
            {1, 0, 0, 1, 1, 0},
            {1, 1, 1, 0, 1, 0},
            {0, 0, 1, 1, 0, 1},
            {0, 1, 0, 0, 1, 0},};

            int coeff[][] = {{0, 1, 1, 4, 0, 0},
            {1, 0, 0, 2, 0, 2},
            {1, 0, 0, 1, 1, 0},
            {1, 2, 3, 0, 5, 0},
            {0, 0, 8, 5, 0, 1},
            {0, 2, 0, 0, 1, 0},};
            int xx1[] = {110, 200, 110, 200, 200, 350};
            int yy1[] = {250, 250, 350, 350, 450, 350};
            int nom[] = {0, 1, 2, 3, 4, 5};
            max_poid_aréte = 600;
            for (int j = 0; j < 6; j++) {
                graphe.setCordX(j, xx1[j]);
                graphe.setCordY(j, yy1[j]);
                graphe.setNombre(j, nom[j]);

            }
            for (int j = 0; j < 6; j++) {
                for (int k = 0; k < 6; k++) {
                    graphe.setMatrice_adjacence(j, k, matrice[j][k]);
                    graphe.setMatrice_Coefficients(j, k, coeff[j][k]);
                }
            }
            nbr_sommet = 6;
            R_repaint(nbr_sommet, graphe);

        } else if (selected.equalsIgnoreCase("Exemple 2 (TD)")) {
            //jMenuItem2.setEnabled(false);
            graphe_panel.paint(graphe_panel.getGraphics());
            n = 0;
            id = -1;
            id2 = -1;
            int matrice[][] = {
                {0, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 0, 1, 0, 1, 0, 0, 0, 0},
                {1, 1, 0, 1, 0, 0, 0, 0, 1},
                {0, 0, 1, 0, 1, 0, 0, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0},
                {0, 0, 0, 0, 1, 0, 1, 1, 0},
                {0, 0, 0, 0, 0, 1, 0, 1, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 1},
                {0, 0, 1, 1, 0, 0, 0, 1, 0}
            };
            int coeff[][] = {
                {0, 4, 8, 0, 0, 0, 0, 0, 0},
                {4, 0, 11, 0, 8, 0, 0, 0, 0},
                {8, 11, 0, 7, 0, 0, 0, 0, 1},
                {0, 0, 7, 0, 2, 0, 0, 0, 6},
                {0, 8, 0, 2, 0, 7, 0, 4, 0},
                {0, 0, 0, 0, 7, 0, 9, 14, 0},
                {0, 0, 0, 0, 0, 9, 0, 10, 0},
                {0, 0, 0, 0, 4, 14, 10, 0, 2},
                {0, 0, 1, 6, 0, 0, 0, 2, 0}
            };
            int xx1[] = {10, 100, 100, 200, 300, 400, 500, 400, 300};
            int yy1[] = {250, 150, 350, 250, 150, 150, 250, 350, 350};
            int nom[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
            max_poid_aréte = 600;
            for (int j = 0; j < 9; j++) {
                graphe.setCordX(j, xx1[j]);
                graphe.setCordY(j, yy1[j]);
                graphe.setNombre(j, nom[j]);

            }
            for (int j = 0; j < 9; j++) {
                for (int k = 0; k < 9; k++) {
                    graphe.setMatrice_adjacence(j, k, matrice[j][k]);
                    graphe.setMatrice_Coefficients(j, k, coeff[j][k]);
                }
            }
            nbr_sommet = 9;
            R_repaint(nbr_sommet, graphe);

        } else if (selected.equalsIgnoreCase("Matrice des Coefficients")) {
            if (nbr_sommet == 0) {
                JOptionPane.showMessageDialog(null, "vous n'avez crée aucun noeud : ");
            } else {
                this.setEnabled(false);
                new Matrice(nbr_sommet, graphe, 2, this).setVisible(true);
            }
        } else if (selected.equalsIgnoreCase("Matrice d'adjacence")) {
            if (nbr_sommet == 0) {
                JOptionPane.showMessageDialog(null, "vous n'avez crée aucun noeud : ");
            } else {
                this.setEnabled(false);
                new Matrice(nbr_sommet, graphe, 1, this).setVisible(true);
            }
        } else if (selected.equalsIgnoreCase("Nouvelle aréte")) {
            if (nbr_sommet <= 1) {
                JOptionPane.showMessageDialog(null, "Vous dever créer un autre sommet : ");
            } else {
                this.setEnabled(false);
                new Aréte_window(graphe, paint, nbr_sommet, this).setVisible(true);
                graphe_panel.paint(graphe_panel.getGraphics());
                R_repaint(nbr_sommet, graphe);
            }
        }
    }//GEN-LAST:event_Autres_options_listeValueChanged

    private void Confirmer_algo_btn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Confirmer_algo_btn1MouseClicked
        if (prim_radio_btn.isSelected() == true) {
            if (nbr_sommet < 1) {
                JOptionPane.showMessageDialog(null, "vous n'avez crée aucun sommet");
            } else {
                Algorithme_Prim Prim = new Algorithme_Prim(graphe, nbr_sommet, max_poid_aréte);
                Prim.prim();
                distance_txt.setText("" + Prim.getDistance());
            }
        } else if (dijisktra_radio_btn.isSelected() == true) {
            if (nbr_sommet >= 2) {
                SommetActuel = entrer_sommet_source("Entrer le sommet origine..", "sommet origine n'existe pas ", nbr_sommet);// hacemos el llamano de la funcion         
                sommetFin = entrer_sommet_source("Entrez dernier sommet..", "Le dernier sommet n'existe pas", nbr_sommet);
                Algorithme_Dijkstra Dijkstra = new Algorithme_Dijkstra(graphe, nbr_sommet, SommetActuel, sommetFin);
                Dijkstra.dijkstra();
                distance_txt.setText("" + Dijkstra.getDistance());
            } else {
                JOptionPane.showMessageDialog(null, "Il faut créer plusieurs sommets... ");
            }
        }
    }//GEN-LAST:event_Confirmer_algo_btn1MouseClicked

    private void repaindre_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repaindre_labelMouseClicked
        R_repaint(nbr_sommet, graphe);
    }//GEN-LAST:event_repaindre_labelMouseClicked

    private void sortir_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortir_menu_itemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_sortir_menu_itemActionPerformed

    private void new_project_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_project_menu_itemActionPerformed

        for (int j = 0; j < nbr_sommet; j++) {
            graphe.setCordX(j, 0);
            graphe.setCordY(j, 0);
            graphe.setNombre(j, 0);
        }
        for (int j = 0; j < nbr_sommet; j++) {
            for (int k = 0; k < nbr_sommet; k++) {
                graphe.setMatrice_adjacence(j, k, 0);
                graphe.setMatrice_Coefficients(j, k, 0);
            }
        }
        nbr_sommet = 00;
        graphe_panel.repaint();
    }//GEN-LAST:event_new_project_menu_itemActionPerformed

    private void Eliminer_comboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Eliminer_comboboxActionPerformed
        String selected = Eliminer_combobox.getSelectedItem().toString();
        if (selected.equalsIgnoreCase("Arête")) {
            if (nbr_sommet >= 2) {
                this.setEnabled(false);
                new Eliminer_Aréte(paint, graphe, nbr_sommet, this).setVisible(true);
                graphe_panel.paint(graphe_panel.getGraphics());
                R_repaint(nbr_sommet, graphe);
            } else {
                JOptionPane.showMessageDialog(null, "Il n'y a pas de sommets liés... ");
            }

        } else if (selected.equalsIgnoreCase("Sommet")) {
            int Eliminer = entrer_sommet_source("Entrer un sommet à éliminer ", "sommet non existé", nbr_sommet);
            if (Eliminer <= nbr_sommet && Eliminer >= 0 && nbr_sommet > 0) {
                for (int j = 0; j < nbr_sommet; j++) {
                    for (int k = 0; k < nbr_sommet; k++) {
                        if (j == Eliminer || k == Eliminer) {
                            graphe.setMatrice_adjacence(j, k, -1);
                        }
                    }
                }
                for (int l = 0; l < nbr_sommet - 1; l++) {
                    for (int m = 0; m < nbr_sommet; m++) {
                        if (graphe.getMatrice_adjacence(l, m) == -1) {
                            graphe.setMatrice_adjacence(l, m, graphe.getMatrice_adjacence(l + 1, m));
                            graphe.setMatrice_adjacence(l + 1, m, -1);
                            graphe.setMatrice_Coefficients(l, m, graphe.getMatrice_Coefficients(l + 1, m));
                        }
                    }
                }
                for (int l = 0; l < nbr_sommet; l++) {
                    for (int m = 0; m < nbr_sommet - 1; m++) {

                        if (graphe.getMatrice_adjacence(l, m) == -1) {
                            graphe.setMatrice_adjacence(l, m, graphe.getMatrice_adjacence(l, m + 1));
                            graphe.setMatrice_adjacence(l, m + 1, -1);
                            graphe.setMatrice_Coefficients(l, m, graphe.getMatrice_Coefficients(l, m + 1));

                        }
                    }
                }

                graphe.setCordX(Eliminer, -10);
                graphe.setCordY(Eliminer, -10);
                graphe.setNombre(Eliminer, -10);
                for (int j = 0; j < nbr_sommet; j++) {
                    for (int k = 0; k < nbr_sommet - 1; k++) {
                        if (graphe.getCordX(k) == -10) {
                            graphe.setCordX(k, graphe.getCordX(k + 1));
                            graphe.setCordX(k + 1, -10);
                            graphe.setCordY(k, graphe.getCordY(k + 1));
                            graphe.setCordY(k + 1, -10);
                            graphe.setNombre(k, graphe.getNombre(k + 1));
                            graphe.setNombre(k + 1, -10);
                        }
                    }
                }
                for (int j = 0; j < nbr_sommet; j++) {
                    graphe.setNombre(j, j);// renombramos             
                }
                // eliminamos los -1 y  los -10 
                for (int j = 0; j < nbr_sommet + 1; j++) {
                    for (int k = 0; k < nbr_sommet + 1; k++) {
                        if (graphe.getMatrice_adjacence(j, k) != -1) {
                            graphe.setMatrice_adjacence(j, k, graphe.getMatrice_adjacence(j, k));
                        } else {
                            graphe.setMatrice_adjacence(j, k, 0);
                        }
                        if (graphe.getMatrice_Coefficients(j, k) != -10) {
                            graphe.setMatrice_Coefficients(j, k, graphe.getMatrice_Coefficients(j, k));
                        } else {
                            graphe.setMatrice_Coefficients(j, k, 0);
                        }
                    }
                }
                nbr_sommet--;
                graphe_panel.paint(graphe_panel.getGraphics());
                R_repaint(nbr_sommet, graphe);
            }
        } else if (selected.equalsIgnoreCase("Toutes les aréte")) {
            for (int j = 0; j < nbr_sommet; j++) {
                for (int k = 0; k < nbr_sommet; k++) {
                    graphe.setMatrice_adjacence(j, k, 0);
                    graphe.setMatrice_adjacence(k, j, 0);
                    graphe.setMatrice_Coefficients(j, k, 0);
                    graphe.setMatrice_Coefficients(k, j, 0);
                }
            }
            graphe_panel.paint(graphe_panel.getGraphics());
            R_repaint(nbr_sommet, graphe);

        }
    }//GEN-LAST:event_Eliminer_comboboxActionPerformed

    private void fichier_menu_itemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fichier_menu_itemMouseEntered

    }//GEN-LAST:event_fichier_menu_itemMouseEntered

    private void jMenuBar1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseDragged
        int X = evt.getXOnScreen();
        int Y = evt.getYOnScreen();
        this.setLocation(X - xMouse, Y - yMouse);
        jMenuBar1.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));

    }//GEN-LAST:event_jMenuBar1MouseDragged

    private void jMenuBar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jMenuBar1MousePressed

    private void jMenuBar1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuBar1MouseMoved

    private void jMenuBar1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseReleased
        jMenuBar1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuBar1MouseReleased

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal_Window().setVisible(true);
            }
        });

    }

    private int nbr_sommet = 0;// lleva el # de nodos creado 
    private int sommetFin;
    private int SommetActuel;
    int n = 0, nn = 0, id, id2;// permite controlar que se halla dado click sobre un nodo
    private int max_poid_aréte;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList Autres_options_liste;
    private javax.swing.JLabel Confirmer_algo_btn1;
    private javax.swing.JComboBox Eliminer_combobox;
    private javax.swing.JLabel autre_option_label;
    private javax.swing.JPanel autres_options_panel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton dijisktra_radio_btn;
    private javax.swing.JTextField distance_txt;
    private javax.swing.JMenu fichier_menu_item;
    private javax.swing.JLabel graphe_label;
    public static javax.swing.JPanel graphe_panel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem new_project_menu_item;
    private javax.swing.JRadioButton prim_radio_btn;
    private javax.swing.JLabel principal_window_label;
    private javax.swing.JPanel principale_panel;
    private javax.swing.JLabel repaindre_label;
    private javax.swing.JMenuItem sortir_menu_item;
    // End of variables declaration//GEN-END:variables
}
