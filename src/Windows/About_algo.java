/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Windows;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;

/**
 *
 * @author Moh Pixou
 */
public class About_algo extends javax.swing.JFrame {

    int xMouse;
    int yMouse;

    public void Close() {

        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    public About_algo() {
        initComponents();
        dijkstra_radio_btn.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        dijkstra_radio_btn = new javax.swing.JRadioButton();
        prim_radio_btn = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("À propos des Algorithmes");
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel2MouseDragged(evt);
            }
        });
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel2MouseReleased(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 20));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 20, 540));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 20));

        jPanel1.setBackground(new java.awt.Color(60, 109, 245));
        jPanel1.setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Algorithme de Dijkstra\n\nÉtape 1 : Pour initialiser le problème\n• d(S) = 0, p(S) = *;\n• d(j) = , p(j) = - pour tous les autres noeuds;\n• S est fermé et tous les autres noeuds sont ouverts;\n• k (noeud actuel) = S (le dernier nœud fermé).\n\nÉtape 2 :\n• Examiner tous les arcs (k, j) sortant de k ;\n• Si le noeud j est fermé, passer au prochain arc ;\n• Sinon, d(j) = Min [d(j), d(k)+ l(k, j) ].\nSi le minimum est atteint par k, poser p(j) = k\n\nÉtape 3 :\n• Pour choisir le prochain noeud à fermer, comparer les d(j) \nde tous les noeuds ouverts.\n• Choisir celui avec le plus petit d(j).\n• Identifier ce noeud par i.\n\nÉtape 4 :\n• Fermer i.\n• Si tous les noeuds du graphe sont fermés, arrêter.\n• Sinon, poser k = i et retourner à l’étape 2.\"\n");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(150, 50, 500, 460);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("À propos des Algorithmes");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(260, 20, 180, 17);

        dijkstra_radio_btn.setBackground(new java.awt.Color(60, 109, 245));
        buttonGroup1.add(dijkstra_radio_btn);
        dijkstra_radio_btn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        dijkstra_radio_btn.setForeground(new java.awt.Color(255, 255, 255));
        dijkstra_radio_btn.setText("Dijkstra");
        dijkstra_radio_btn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dijkstra_radio_btnStateChanged(evt);
            }
        });
        dijkstra_radio_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijkstra_radio_btnActionPerformed(evt);
            }
        });
        jPanel1.add(dijkstra_radio_btn);
        dijkstra_radio_btn.setBounds(20, 120, 75, 25);

        prim_radio_btn.setBackground(new java.awt.Color(60, 109, 245));
        buttonGroup1.add(prim_radio_btn);
        prim_radio_btn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        prim_radio_btn.setForeground(new java.awt.Color(255, 255, 255));
        prim_radio_btn.setText("Prim");
        prim_radio_btn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                prim_radio_btnStateChanged(evt);
            }
        });
        prim_radio_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prim_radio_btnActionPerformed(evt);
            }
        });
        jPanel1.add(prim_radio_btn);
        prim_radio_btn.setBounds(20, 150, 53, 25);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 680, 520));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/User-Interface-Close-Window-icon.png"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, -1, 20));

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 20, 25, 540));

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 680, 20));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void prim_radio_btnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_prim_radio_btnStateChanged

    }//GEN-LAST:event_prim_radio_btnStateChanged

    private void dijkstra_radio_btnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dijkstra_radio_btnStateChanged

    }//GEN-LAST:event_dijkstra_radio_btnStateChanged

    private void prim_radio_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prim_radio_btnActionPerformed
        jTextArea1.setText("Algorithme Prim\n"
                + "\n"
                + "ENTREES G=(V,E) un graphe connexe avec une valuation positive des arêtes\n"
                + "Sortie T un arbre couvrant de poids minimum\n"
                + "\n"
                + "F: ENSEMBLE des arêtes de l’arbre\n"
                + "U : ENSEMBRE des sommets connectés par F\n"
                + "\n"
                + "Initialiser F à vide\n"
                + "Choisir arbitrairement un sommet s ; Initialiser U :={s}\n"
                + "\n"
                + "Tant Que U ≠ V\n"
                + "        Sélectionner l’arrête (x,y) du cocycle de U de poids minimum \n"
                + "        F := F ∪ {(x,y)}\n"
                + "        U := U ∪ {y}\n"
                + "Fin Tanque\n"
                + "\n"
                + "Retourner T =(V,F)   ");
        dijkstra_radio_btn.setEnabled(true);
        prim_radio_btn.setEnabled(false);
        dijkstra_radio_btn.setForeground(Color.white);
        prim_radio_btn.setForeground(Color.gray);
    }//GEN-LAST:event_prim_radio_btnActionPerformed

    private void dijkstra_radio_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijkstra_radio_btnActionPerformed
        jTextArea1.setText("Algorithme de Dijkstra\n"
                + "\n"
                + "Étape 1 : Pour initialiser le problème\n"
                + "• d(S) = 0, p(S) = *;\n"
                + "• d(j) = , p(j) = - pour tous les autres noeuds;\n"
                + "• S est fermé et tous les autres noeuds sont ouverts;\n"
                + "• k (noeud actuel) = S (le dernier nœud fermé).\n"
                + "\n"
                + "Étape 2 :\n"
                + "• Examiner tous les arcs (k, j) sortant de k ;\n"
                + "• Si le noeud j est fermé, passer au prochain arc ;\n"
                + "• Sinon, d(j) = Min [d(j), d(k)+ l(k, j) ].\n"
                + "Si le minimum est atteint par k, poser p(j) = k\n"
                + "\n"
                + "Étape 3 :\n"
                + "• Pour choisir le prochain noeud à fermer, comparer les d(j) \n"
                + "de tous les noeuds ouverts.\n"
                + "• Choisir celui avec le plus petit d(j).\n"
                + "• Identifier ce noeud par i.\n"
                + "\n"
                + "Étape 4 :\n"
                + "• Fermer i.\n"
                + "• Si tous les noeuds du graphe sont fermés, arrêter.\n"
                + "• Sinon, poser k = i et retourner à l’étape 2.\"\n"
                + "");
        dijkstra_radio_btn.setEnabled(false);
        prim_radio_btn.setEnabled(true);
        dijkstra_radio_btn.setForeground(Color.gray);
        prim_radio_btn.setForeground(Color.WHITE);
    }//GEN-LAST:event_dijkstra_radio_btnActionPerformed

    private void jLabel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseDragged
        int X = evt.getXOnScreen();
        int Y = evt.getYOnScreen();
        this.setLocation(X - xMouse, Y - yMouse);
        jLabel2.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
    }//GEN-LAST:event_jLabel2MouseDragged

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jLabel2MousePressed

    private void jLabel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseReleased
        jLabel1.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jLabel2MouseReleased

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Close();
    }//GEN-LAST:event_jLabel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(About_algo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(About_algo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(About_algo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(About_algo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new About_algo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JRadioButton dijkstra_radio_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JRadioButton prim_radio_btn;
    // End of variables declaration//GEN-END:variables
}
